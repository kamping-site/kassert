namespace kassert {

  /** @mainpage KASSERT Documentation Overview

  <img width="920" height="200" src="logo.svg">

  ## Functionallity
  - \ref assertion :
    - simple assert (\ref KASSERT),
    - throwing assert (\ref THROWING_KASSERT), and
    - a trowing assert with custom exception (\ref THROWING_KASSERT_SPECIFIED)
  - \ref assertion-levels : simple configuration of different assertion levels
  - \ref expression-expansion : easy extensibility for custom data types in error messages


## Example 

The \ref KASSERT macros accepts 1, 2 or 3 arguments. 

```
KASSERT(1 + 1 == 3, "The world is a lie!", kassert::assert::normal);
KASSERT(1 + 1 == 3, "The world is a lie!"); // use default assertion level (kassert::assert::normal)
KASSERT(1 + 1 == 3); // omit custom error message
```

You can also use C++ streams to build custom error messages on the fly.

```
int a = 1;
int b = 3;
KASSERT(a + a == b, "Under the assumption that a is " << a << ", the world is a lie!");
```

Use \ref THROWING_KASSERT to throw an exception if the assertion fails.
This requires the target property \c KASSERT_EXCEPTION_MODE to be set
to \c ON on the target linking against \c kassert. If exception mode is
not enabled, \ref THROWING_KASSERT acts the same as \ref KASSERT.

```
THROWING_KASSERT(1 + 1 == 3, "The world is a lie!");
THROWING_KASSERT(1 + 1 == 3); // omit custom error message
```

You can also throw a custom exception type using the \ref THROWING_KASSERT_SPECIFIED macro:

```
THROWING_KASSERT_SPECIFIED(1 + 1 == 3, "The world is a lie!", your::ns::Exception [, ...]);
```

The constructor of your custom exception type must be called with a `std::string` as its first 
argument, followed by the remaining arguments `[, ...]` passed to \ref THROWING_KASSERT_SPECIFIED.

### Assertion Levels 

Assertions are enabled if their assertion level (optional third parameter of \ref KASSERT) is <b>less than or equal to</b> the active assertion level.
The default level is \ref kassert::assert::normal (30).
Set the CMake target property \c KASSERT_ASSERTION_LEVEL on you target linking against \c kassert to the numeric value of the desired assertion level.
If omitted, the assertion level is set to 0, which disables all assertions.

```cmake
add_library(my_code ...)
target_link_libraries(my_code PRIVATE kassert::kassert)
set_target_properties(my_code PROPERTIES KASSERT_ASSERTION_LEVEL 10)
```

### Custom Assertion Levels 

You are free to define your own assertion levels. For instance: 

```
namespace kamping::assert {
#define KAMPING_ASSERTION_LEVEL_LIGHT 20
constexpr int light = KAMPING_ASSERTION_LEVEL_LIGHT;

#define KAMPING_ASSERTION_LEVEL_HEAVY 40
constexpr int heavy = KAMPING_ASSERTION_LEVEL_HEAVY;
} // namespace kamping::assert 
```

## Requirements

- C++17-ready compiler (GCC, Clang, ICX)
- Building this documentation requires `Doxygen 1.9.2` or newer
   
## LICENSE

KAssert is released under the MIT License. See ./LICENSE for details.


  */

/**

 @defgroup assertion Assertions
 @brief Assertion macros provided by \c KAssert

 @defgroup assertion-levels Assertion levels
 @brief Predefined assertion levels.

 @defgroup expression-expansion Expression Expansions
 @brief Utility to expand different inputs as error message.
 
*/

} // namespace kassert
